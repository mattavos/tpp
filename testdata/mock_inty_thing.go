package testdata

import mock "github.com/stretchr/testify/mock"

// MockIntyThing is an autogenerated mock type for the IntyThing type
type MockIntyThing struct {
	mock.Mock
}

type MockIntyThing_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIntyThing) EXPECT() *MockIntyThing_Expecter {
	return &MockIntyThing_Expecter{mock: &_m.Mock}
}

// DoThing provides a mock function with given fields: a, b
func (_m *MockIntyThing) DoThing(a int, b int) (int, error) {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for DoThing")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (int, error)); ok {
		return rf(a, b)
	}
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIntyThing_DoThing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoThing'
type MockIntyThing_DoThing_Call struct {
	*mock.Call
}

// DoThing is a helper method to define mock.On call
//   - a int
//   - b int
func (_e *MockIntyThing_Expecter) DoThing(
	a interface{},
	b interface{},
) *MockIntyThing_DoThing_Call {
	return &MockIntyThing_DoThing_Call{Call: _e.mock.On("DoThing", a, b)}
}

func (_c *MockIntyThing_DoThing_Call) Run(run func(a int, b int)) *MockIntyThing_DoThing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockIntyThing_DoThing_Call) Return(_a0 int, _a1 error) *MockIntyThing_DoThing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIntyThing_DoThing_Call) RunAndReturn(
	run func(int, int) (int, error),
) *MockIntyThing_DoThing_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIntyThing creates a new instance of MockIntyThing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIntyThing(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIntyThing {
	mock := &MockIntyThing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
