// Code generated by mockery v2.40.2. DO NOT EDIT.

package testdata

import mock "github.com/stretchr/testify/mock"

// MockFuncyThing is an autogenerated mock type for the FuncyThing type
type MockFuncyThing struct {
	mock.Mock
}

type MockFuncyThing_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFuncyThing) EXPECT() *MockFuncyThing_Expecter {
	return &MockFuncyThing_Expecter{mock: &_m.Mock}
}

// DoThing provides a mock function with given fields: _a0
func (_m *MockFuncyThing) DoThing(_a0 func(int) int) func(int) int {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DoThing")
	}

	var r0 func(int) int
	if rf, ok := ret.Get(0).(func(func(int) int) func(int) int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(int) int)
		}
	}

	return r0
}

// MockFuncyThing_DoThing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoThing'
type MockFuncyThing_DoThing_Call struct {
	*mock.Call
}

// DoThing is a helper method to define mock.On call
//   - _a0 func(int) int
func (_e *MockFuncyThing_Expecter) DoThing(_a0 interface{}) *MockFuncyThing_DoThing_Call {
	return &MockFuncyThing_DoThing_Call{Call: _e.mock.On("DoThing", _a0)}
}

func (_c *MockFuncyThing_DoThing_Call) Run(run func(_a0 func(int) int)) *MockFuncyThing_DoThing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(int) int))
	})
	return _c
}

func (_c *MockFuncyThing_DoThing_Call) Return(_a0 func(int) int) *MockFuncyThing_DoThing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFuncyThing_DoThing_Call) RunAndReturn(run func(func(int) int) func(int) int) *MockFuncyThing_DoThing_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFuncyThing creates a new instance of MockFuncyThing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFuncyThing(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFuncyThing {
	mock := &MockFuncyThing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
